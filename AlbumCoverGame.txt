This Album Cover Designer program is designed to allow the user to understand what the director would want the album cover to be by showing them several different draft covers. The director is also able to tell the user that the musicians are either too left, too right or in the right spot. The game loops until the director believes that the musicians are in the right place, so you get a “Congratulations!” message. 
The code is separated into 6 different tasks. For the first task we created a class called LineUp in which we each musician to an uppercase character. This was done by using a public constructor that takes char[] as an argument and initialises the line up. Then we use a public method char getMusician(int i) which assign the musicians to the letters. We also used another method called String toString() that returns the sequence of musicians separated by spaces. I used a for loop for the spaces but also added a condition that doesn’t add a space to the last letter.
For the second task we create another class called DraftCover. In this class we use a public constructor that takes two LineUp arguments, one being suggestion and the other being solution. Then we add three public methods. Before that we add a method getLineUp() which returns the suggested LineUp. The first method is getNumGood() that returns the number of correctly positioned musicians as an int value. The second one is getNumTooLeft() that returns the number of musicians that are suitable for the cover but are too left of the line up. Lastly, the third one is getNumTooRight() that returns the number of musicians that are suitable for the cover but are too right of the line up. We also add a toString() method that returns a String representing the musician that tells us the number of good and badly positioned musicians.
For the third task we created another class called AlbumCoverGame in which we use a public constructor that takes a single LineUp argument which is the game solution. Then we used a public method testDraftCover (LineUp lineup) that creates a new suggestion from the DraftCover and would return a Boolean that is true if it is what the director expected. We also used another public method getPreviousDraftCovers and getSolution, which returns the head of the list of previous draft covers and the solutions. We also created our own linked list called LinkedList which allowed us to create a collection that can contain many objects of the same type.  In our LinkedList node class, our toString method returned a string that represents a list of each attempt.
For our fourth task we continued from the second task by adding for loops to our three public methods. The loops will add a count if the conditions are true. We also added another method isCorrect() that returns a boolean true if the suggestion matches the solution.
Lastly, we generate a random solution by using arrays and a for loop that loops through the array and picks a random letter which is then removed of the list to make sure it doesn’t get repeated.

